/*SELECT ALL VALUES FROM A TABLE*/
SELECT * FROM ACTORS

/*SELECT TOP 10 ROWS FROM A TABLE*/
SELECT TOP 10 * FROM ACTORS

/*SELECT FIRST AND LAST NAME FROM ACTOTS TABLE WHEN A CERTAIN CONDITION HOLDS TRUE*/
SELECT FIRST_NAME, LAST_NAME FROM ACTORS WHERE LAST_NAME ='chincheta'

/*SELECT THE DISTINCT VALUES FROM A COLUMN*/
SELECT DISTINCT LAST_NAME FROM ACTORS

/*SELECT A DISTINCT COMBINATION OF FIRST AND LAST NAMES*/
SELECT DISTINCT FIRST_NAME, LAST_NAME FROM ACTORS

/*RETURN WHEN TWO CONDITIONS EVALUATE TO TRUE -- AND */
SELECT  * FROM ACTORS WHERE FIRST_NAME = 'Alain' AND LAST_NAME ='Abasie'

/*RETURN WHEN EITHER CONDITIONS EVALUATE TO TRUE -- OR */
SELECT  * FROM ACTORS WHERE FIRST_NAME = 'Alain' OR LAST_NAME ='Abecassis'

/*RETURN WHEN  ONE CONDITION EVALUATES TO TRUE AND THE OTHER CONDITION TO FALSE*/
SELECT  * FROM ACTORS WHERE FIRST_NAME = 'Alain' AND NOT LAST_NAME ='Abecassis'

/*FILTER OUT MULTIPLE VALUES*/
SELECT * FROM ACTORS WHERE FIRST_NAME IN ('Alain','Michael','Eloy')

/*FILTER DATA USING THE BETWEEN CLAUSE*/
SELECT * FROM MOVIES WHERE RANKSCORE BETWEEN 8 AND 9

/*USE OF AGGREGATE FUNCTION*/
SELECT 
MAX(RANKSCORE) AS 'MAXIMUM OF RANKSCORE'
,MIN(RANKSCORE) AS 'MINIMUM OF RANKSCORE'
,AVG(RANKSCORE) AS 'AVERAGE OF RANKSCORE'
,COUNT(*) AS 'TOTAL # OF ROWS' 
FROM 
MOVIES

/*JOINS IN SQL*/

/*INNER JOIN*/
SELECT D.id, D.first_name,DG.genre
FROM DIRECTORS D INNER JOIN DIRECTORS_GENRES DG
ON D.id = DG.director_id 
/*TO FILTER FURTHER - ZERO ON A CERTAIN VALUE*/
SELECT D.id, D.first_name,DG.genre
FROM DIRECTORS D INNER JOIN DIRECTORS_GENRES DG
ON D.id = DG.director_id AND D.id = 8

/*LEFT JOIN - RETURN ALL THE VALUES FROM TABLE ON LEFT OF THE JOIN I.E DIRECTORS*/
SELECT D.id, D.first_name,DG.genre
FROM DIRECTORS D LEFT JOIN DIRECTORS_GENRES DG
ON D.id = DG.director_id 

/*RIGHT JOIN - RETURN ALL THE VALUES FROM TABLE ON RIGHT OF THE JOIN I.E DIRECTORS_GENRE*/
SELECT D.id, D.first_name,DG.genre
FROM DIRECTORS D RIGHT JOIN DIRECTORS_GENRES DG
ON D.id = DG.director_id 

/*FULL OUTER JOIN - RETURN A CROSS SECTION OF THE TABLES */
SELECT D.id, D.first_name, DG.genre
FROM DIRECTORS D FULL OUTER JOIN DIRECTORS_GENRES DG
ON D.id = DG.director_id 

/*GROUPING DATA*/
SELECT D.FIRST_NAME, D.LAST_NAME, COUNT(DG.GENRE) AS '# OF GENRES'
FROM DIRECTORS D INNER JOIN DIRECTORS_GENRES DG
ON D.ID = DG.DIRECTOR_ID
GROUP BY D.FIRST_NAME, D.LAST_NAME
HAVING COUNT(DG.GENRE) > 4
ORDER BY 3 DESC

/*SUBQUERY*/
SELECT MV.ID, MV.NAME, MG.GENRE, MV.RANKSCORE
FROM MOVIES MV INNER JOIN MOVIES_GENRES MG
ON MV.ID = MG.MOVIE_ID
WHERE MV.RANKSCORE > (SELECT AVG(RANKSCORE) FROM MOVIES)
ORDER BY 4 ASC

/*UNION- eliminates the duplicates*/
SELECT FIRST_NAME, LAST_NAME FROM IMDB..ACTORS
WHERE FIRST_NAME LIKE 'M%'
UNION
SELECT FIRST_NAME, LAST_NAME FROM HISTORY..ACTORS_HIST
WHERE FIRST_NAME LIKE 'M%'

/*UNION ALL-does not eliminate the duplicates*/
SELECT FIRST_NAME, LAST_NAME FROM IMDB..ACTORS
WHERE FIRST_NAME LIKE 'M%'
UNION
SELECT FIRST_NAME, LAST_NAME FROM HISTORY..ACTORS_HIST
WHERE FIRST_NAME LIKE 'M%'


/*CASE STATEMENT*/
SELECT 
 MV.NAME
,MG.GENRE
,CASE WHEN MV.RANKSCORE <= 5 THEN 'AVERAGE'
		  WHEN MV.RANKSCORE > 5 AND MV.RANKSCORE <=9 THEN 'GOOD'
		  WHEN MV.RANKSCORE > 9 THEN 'EXCELLENT'
		  ELSE 'NOT DECLARED'
END AS CATEGORY_RATING
FROM MOVIES MV INNER JOIN MOVIES_GENRES MG
ON MV.ID = MG.MOVIE_ID




